" How many lines of history VIM has to remember
set history=100

" All of plugins must be added here, before 'filetype plugin indent'
if isdirectory(expand('~/.vim/bundle/Vundle.vim'))
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    Plugin 'preservim/nerdtree'
    Plugin 'ctrlpvim/ctrlp.vim'
    Plugin 'chrisbra/vim-commentary'
    Plugin 'vim-airline/vim-airline'
    Plugin 'tpope/vim-fugitive'
    Plugin 'sheerun/vim-polyglot'
    Plugin 'jiangmiao/auto-pairs'

    call vundle#end()
endif

set belloff=all

"==================== INSTALL GVIM (vim-gtk3) TO ENABLE CLIPBOARD FEATURES ====================

" remove menubar and toolbar of gvim
set go -=m
set go -=T

if (has("termguicolors"))
    set termguicolors
endif

" Filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from outside
set autoread
au FocusGained,BufEnter * checktime

" Graphical menu for autocomplete
set wildmenu

" Make 'find' fuzzy
" Search down into subfolders
" Provides tab completion for all file related tasks
set path+=**

" Always show cursor position
set ruler

" Configure backspace to work properly in INSERT mode
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Highlight search results
set hlsearch
set incsearch

" Ignores case during search
set ignorecase
set smartcase

" Enable syntax highlighting
syntax enable

" Disable swap files
set noswapfile

let g:material_theme_style = 'darker'
"colorscheme badwolf
colorscheme gruvbox
"colorscheme inkpot
"colorscheme molokai
"colorscheme nord
"colorscheme onedark
"colorscheme onehalfdark
"colorscheme tender
"colorscheme material

set background=dark
if (!has("gui_running"))
    hi Normal guibg=NONE ctermbg=NONE
endif

" Use spaces for tabs
set expandtab

" TAB = 4 spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Set an hybrid of absolute and relative numbers
set number relativenumber

" Highlight matching
set showmatch

" Shows the last command in the bottom right
set showcmd

" Use block cursor on normal mode and line cursor on insert mode
" Ps = 0  -> blinking block.
" Ps = 1  -> blinking block (default).
" Ps = 2  -> steady block.
" Ps = 3  -> blinking underline.
" Ps = 4  -> steady underline.
" Ps = 5  -> blinking bar (xterm).
" Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[5 q"
let &t_EI = "\e[1 q"

" Draws a horizontal highlight on the line the cursor is currently on
set cursorline

" Set vertical split to open new window on the right
set splitright

" Enable mouse
set mouse=a

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Use 'jk' quckly to get out of insert mode (same as spacemacs)
imap jk <Esc>

" With a map1leader it's possible to do extra key combinations
let mapleader=" "

" Map increment and decrement with the same bindings as spacemacs
" (evil-numbers)
map <leader>n= <C-a>
map <leader>n- <C-x>

" Clipborad mappings
" <leader>y to yank to clipboard
" <leader>p to paste from clipboard after the cursor
" <leader>P to paste from clipboard before the cursor
noremap <leader>y "+y
noremap <leader>p "+p
noremap <leader>P "+P

" Map <leader>, to clear search highlight
nnoremap <leader>, :nohlsearch<CR>

" Map <leader>ss to toggle and untoggle spell checking
map <leader>ss :setlocal spell!<CR>

" Map <leader>t to open a new tab
map <leader>t :tabnew<CR>

" Map <leader>f to perform 'fuzzy search like' on edit command
map <leader>f :edit  **/*

" Map <leader>b to list buffers
map <leader>b :ls<CR>

" Map <leader>. to remove all trailing spaces
map <leader>. :%s/\s\+$//g<CR>

" Map <leader>; to Highlight trailing spaces
map <leader>; :/\s\+$<CR>

" On visual select mode, press n will place a commad on normal mode
vnoremap n :normal 

" YouCompleteMe Jump To Definition
nnoremap <leader>jd :YcmCompleter GoTo<CR>
nnoremap <leader>jr :YcmCompleter GoToReferences<CR>
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_autoclose_preview_window_after_insertion = 1

" NERDTree mappings
" 'SPC p t' is the 'project tree' command on spacemacs. Use the same here
function! NerdTreeToggleFind()
    if exists("g:NERDTree") && g:NERDTree.IsOpen()
        NERDTreeClose
    elseif filereadable(expand('%'))
        NERDTreeFind
    else
        NERDTree
    endif
endfunction
nnoremap <leader>pt :call NerdTreeToggleFind()<CR>

" Start NERDTree and put the cursor back in the other window.
" autocmd VimEnter * NERDTree | wincmd p
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Use CSyntaxAfter plugin for syntax highlight on C-like languages
autocmd! FileType c,cpp,java,php call CSyntaxAfter()

" Set highlight at 101th column for informative purposes
" For git commit, highlight the 72th column
let &colorcolumn="101"
autocmd FileType gitcommit let &colorcolumn="72"

" easymotion highlight colors
hi clear EasyMotionShade
hi link EasyMotionShade Comment

" BEGIN ctrlp.vim configs =========================
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_buffer_func = { 'enter': 'CtrlPEnter', 'exit':  'CtrlPExit', }

function CtrlPEnter()
    hi CursorLine cterm=bold,italic
endfunction

function CtrlPExit()
    hi CursorLine cterm=none
endfunction
" END ctrlp.vim configs =========================

" Automatically open quickfix after vimgrep
augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost [^1]* cwindow
    autocmd QuickFixCmdPost 1* lwindow
augroup END

" Rename tabs to show tab# and # of viewports
if exists("+showtabline")
    set tabpagemax=15

    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let s .= (i == 1 ? '' : '| ')
            let wn = tabpagewinnr(i,'$')

            let s .= (i== t ? '%#TabNumSel#' : '%#TabNum#')
            let s .= i
            if tabpagewinnr(i,'$') > 1
                let s .= '.'
                let s .= (i== t ? '%#TabWinNumSel#' : '%#TabWinNum#')
                let s .= (tabpagewinnr(i,'$') > 1 ? wn : '')
            end

            let s .= ' %*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= file
            "let s .= (i == t ? '%m' : '')
            " Use below line t indicate whether a tab has been modified as it
            " works not only for the current tabs, but for all
            let s .= (getbufvar(buflist[winnr - 1], "&mod") ? '*' : '')
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
endif

" Map F2 to toggle quickfix window
function! ToggleQuickFix()
    if empty(filter(getwininfo(), 'v:val.quickfix'))
        copen
    else
        cclose
    endif
endfunction

nnoremap <silent> <F2> :call ToggleQuickFix()<cr>
